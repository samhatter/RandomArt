{"ast":null,"code":"var _jsxFileName = \"/app/src/utils/WallpaperArt.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WallpaperArt = props => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const valueToColor = (value, startColor, endColor) => {\n      value = Math.max(0, Math.min(value, 1));\n      const r = Math.round(startColor[0] + (endColor[0] - startColor[0]) * value);\n      const g = Math.round(startColor[1] + (endColor[1] - startColor[1]) * value);\n      const b = Math.round(startColor[2] + (endColor[2] - startColor[2]) * value);\n      return [r, g, b];\n    };\n    const randomEvalFunc = props => {\n      const chooseFunc = num_args => {\n        const rand = Math.random();\n        for (let i = 0, acc = 0; i < props.funcs[num_args - 1].length; i++) {\n          acc += props.funcs[num_args - 1][i].prob;\n          if (rand <= acc) return {\n            \"func\": props.funcs[num_args - 1][i].func,\n            \"string\": props.funcs[num_args - 1][i].string\n          };\n        }\n        console.log(\"chooseFunc Messed Up\");\n        return {\n          \"func\": props.funcs[num_args - 1][0].func,\n          \"string\": props.funcs[num_args - 1][0].string\n        };\n      };\n      const buildTree = currentDepth => {\n        if (currentDepth === 0) {\n          const nodeFunc = chooseFunc(2);\n          return {\n            \"func\": nodeFunc.func,\n            \"children\": [],\n            \"string\": nodeFunc.string\n          };\n        }\n        const children = [];\n        children.push(buildTree(currentDepth - 1));\n        for (let i = 0; i < props.max_children - 1; i++) {\n          if (Math.random() <= props.child_prob) {\n            children.push(buildTree(currentDepth - 1));\n          }\n        }\n        const nodeFunc = chooseFunc(children.length);\n        const node = {\n          \"func\": nodeFunc.func,\n          \"children\": children,\n          \"string\": nodeFunc.string\n        };\n        return node;\n      };\n      return buildTree(props.depth);\n    };\n    const evalTree = (x, y, node) => {\n      if (node.children.length === 0) {\n        return node.func(x, y);\n      } else {\n        const childResults = node.children.map(child => evalTree(x, y, child));\n        return node.func(...childResults);\n      }\n    };\n    const printTree = node => {\n      if (node.children.length === 0) {\n        return node.string(\"x\", \"y\");\n      } else {\n        const childResults = node.children.map(child => printTree(child));\n        return node.string(...childResults);\n      }\n    };\n    const generateArt = (props, ctx, clientWidth, clientHeight, scaleFactor) => {\n      const imageData = ctx.createImageData(clientWidth * scaleFactor, clientHeight * scaleFactor);\n      const data = imageData.data;\n      const tree = randomEvalFunc(props);\n      console.log(printTree(tree));\n      for (let y = 0; y < clientHeight * scaleFactor; y++) {\n        for (let x = 0; x < clientWidth * scaleFactor; x++) {\n          const value = evalTree(x / (scaleFactor * clientWidth), y / (scaleFactor * clientHeight), tree);\n          const color = valueToColor(value, [0, 0, 0], [255, 255, 255]);\n          const index = (y * clientWidth * scaleFactor + x) * 4;\n          data[index] = color[0]; // R\n          data[index + 1] = color[1]; // G\n          data[index + 2] = color[2]; // B\n          data[index + 3] = 255; // A\n        }\n      }\n      ctx.putImageData(imageData, 0, 0);\n    };\n    const drawArt = (canvas, props) => {\n      const ctx = canvas.getContext('2d');\n      const scaleFactor = window.devicePixelRatio || 1;\n      if (!ctx) {\n        return;\n      }\n      canvas.width = canvas.offsetWidth * scaleFactor;\n      canvas.height = canvas.offsetHeight * scaleFactor;\n      ctx.scale(scaleFactor, scaleFactor);\n      const {\n        clientWidth,\n        clientHeight\n      } = canvas;\n      generateArt(props, ctx, clientWidth, clientHeight, scaleFactor);\n    };\n    const canvas = canvasRef.current;\n    if (canvas) {\n      drawArt(canvas, props);\n    }\n    ;\n    const handleClick = event => {\n      drawArt(canvas, props);\n    };\n    document.addEventListener('click', handleClick);\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      display: 'block'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 10\n  }, this);\n};\n_s(WallpaperArt, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = WallpaperArt;\nexport default WallpaperArt;\nvar _c;\n$RefreshReg$(_c, \"WallpaperArt\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","WallpaperArt","props","_s","canvasRef","valueToColor","value","startColor","endColor","Math","max","min","r","round","g","b","randomEvalFunc","chooseFunc","num_args","rand","random","i","acc","funcs","length","prob","func","string","console","log","buildTree","currentDepth","nodeFunc","children","push","max_children","child_prob","node","depth","evalTree","x","y","childResults","map","child","printTree","generateArt","ctx","clientWidth","clientHeight","scaleFactor","imageData","createImageData","data","tree","color","index","putImageData","drawArt","canvas","getContext","window","devicePixelRatio","width","offsetWidth","height","offsetHeight","scale","current","handleClick","event","document","addEventListener","removeEventListener","ref","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/src/utils/WallpaperArt.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst WallpaperArt = (props) => {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const valueToColor = (value, startColor, endColor) => {\n      value = Math.max(0, Math.min(value, 1));\n    \n      const r = Math.round(startColor[0] + (endColor[0] - startColor[0]) * value);\n      const g = Math.round(startColor[1] + (endColor[1] - startColor[1]) * value);\n      const b = Math.round(startColor[2] + (endColor[2] - startColor[2]) * value);\n  \n      return [r,g,b];\n    };\n\n      const randomEvalFunc = (props) => {\n        const chooseFunc = (num_args) => {\n          const rand = Math.random() ;\n          for (let i = 0, acc = 0; i < props.funcs[num_args-1].length; i++) {\n              acc += props.funcs[num_args-1][i].prob;\n              if (rand <= acc) return {\"func\":props.funcs[num_args-1][i].func, \"string\":props.funcs[num_args-1][i].string};\n          }\n          console.log(\"chooseFunc Messed Up\");\n          return {\"func\":props.funcs[num_args-1][0].func, \"string\":props.funcs[num_args-1][0].string};\n        };\n\n        const buildTree = (currentDepth) => {\n          if (currentDepth === 0) {\n              const nodeFunc =chooseFunc(2)\n              return {\"func\":nodeFunc.func, \"children\":[], \"string\": nodeFunc.string};\n          }\n  \n          const children = [];\n\n          children.push(buildTree(currentDepth - 1));\n\n          for (let i = 0; i < props.max_children-1; i++) {\n              if (Math.random() <= props.child_prob) {\n                  children.push(buildTree(currentDepth - 1));\n              }\n          }\n  \n          const nodeFunc= chooseFunc(children.length);\n\n          const node = {\"func\":nodeFunc.func, \"children\":children, \"string\":nodeFunc.string};\n\n          return node;\n        };\n\n        return buildTree(props.depth);\n    };\n\n    const evalTree = (x, y, node) => {\n      if (node.children.length === 0) {\n        return node.func(x,y)\n      }\n      else {\n        const childResults = node.children.map(child => evalTree(x,y,child));\n        return node.func(...childResults);\n      }\n\n    };\n\n    const printTree = (node) => {\n      if (node.children.length === 0) {\n        return node.string(\"x\",\"y\")\n      }\n      else {\n        const childResults = node.children.map(child => printTree(child));\n        return node.string(...childResults);\n      }\n    };\n    \n    const generateArt = (props, ctx, clientWidth, clientHeight, scaleFactor) => {\n      const imageData = ctx.createImageData(clientWidth * scaleFactor, clientHeight * scaleFactor);\n      const data = imageData.data;\n      const tree = randomEvalFunc(props);\n      console.log(printTree(tree));\n      for (let y = 0; y < clientHeight * scaleFactor; y++) {\n        for (let x = 0; x < clientWidth * scaleFactor; x++) {\n          const value = evalTree(x / (scaleFactor * clientWidth), y / (scaleFactor * clientHeight), tree);\n          const color = valueToColor(value, [0, 0, 0], [255, 255, 255]);\n          const index = (y * clientWidth * scaleFactor + x) * 4;\n          data[index] = color[0]; // R\n          data[index + 1] = color[1]; // G\n          data[index + 2] = color[2]; // B\n          data[index + 3] = 255; // A\n        }\n      }\n    \n      ctx.putImageData(imageData, 0, 0);\n    };    \n\n    \n    const drawArt = (canvas, props) => {\n      const ctx = canvas.getContext('2d');\n      const scaleFactor = window.devicePixelRatio || 1;\n      \n      if (!ctx) {\n        return;\n      }\n    \n      canvas.width = canvas.offsetWidth * scaleFactor;\n      canvas.height = canvas.offsetHeight * scaleFactor;\n      ctx.scale(scaleFactor, scaleFactor);\n      const { clientWidth, clientHeight } = canvas;\n      generateArt(props, ctx, clientWidth, clientHeight, scaleFactor);\n    };\n\n    const canvas = canvasRef.current;\n    if (canvas) {\n      drawArt(canvas, props);\n    };\n\n    const handleClick = (event) => {\n      drawArt(canvas,props);\n    };\n\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} style={{ display: 'block' }} />;\n};\n\nexport default WallpaperArt;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}